@startuml

actor "Employee's \nManager" as manager
participant ReservationResource as resource
participant ReservationApi as api
participant "Repository<TimeReservation>" as reservations
participant "Repository<Message>" as messages
participant MessageSender as sender
database DBMS
actor Employee as employee
actor "Employee's \n Paymaster" as paymaster

manager -> resource : accept()
activate resource
resource -> api : accept()
activate api

''''' get desired reservation
api -> reservations : get()
activate reservations
reservations -> DBMS : <<query>>
activate DBMS
DBMS --> reservations : raw response
deactivate DBMS
reservations --> api : TimeReservation
deactivate reservations

''''' update working plan
ref over api : TimeReservation::reserve
api -> reservations : update()
activate reservations
reservations -> DBMS : <<query>>
activate DBMS
DBMS --> reservations : raw response
deactivate DBMS
reservations --> api : TimeReservation
deactivate reservations

''''' create message to manager
ref over api : Message::new
api -> messages : add()
activate messages
messages -> DBMS : <<query>>
activate DBMS
DBMS --> messages : raw response
deactivate DBMS
messages --> api : Message
deactivate messages

''''' send a message
ref over api : TimeReservation::employee()
api -> sender : send()
activate sender
sender ->> employee : <<send>>
sender --> api : void
deactivate sender

''''' send a message
ref over api : Employee::paymaster()
api -> sender : send()
activate sender
sender ->> paymaster : <<send>>
sender --> api : void
deactivate sender

api --> resource : void
deactivate api
resource --> manager : Response
deactivate resource

@enduml