@startuml
actor Paymaster as paymaster
participant AwardResource as resource
participant EmployeesApi as api
participant "Repository<Payments>" as payments
participant "Repository<Employee>" as employees
participant "Repository<Message>" as messages
participant "MessageSender" as sender
database DBMS
actor "Related \n Manager" as manager

paymaster -> resource : accept()
activate resource
resource -> api : accept()
activate api

''''' accept payment
api -> payments : get()
activate payments
payments -> DBMS : <<query>>
activate DBMS
DBMS --> payments : raw response
deactivate DBMS
payments --> api : Payment
deactivate payments

''''' update payment
ref over api : Payment::accept
api -> payments : update()
activate payments
payments -> DBMS : <<query>>
activate DBMS
DBMS --> payments : raw response
deactivate DBMS
payments --> api : Payment
deactivate payments

''''' get awarded employee
api -> employees : get()
activate employees
employees -> DBMS : <<query>>
activate DBMS
DBMS --> employees : raw response
deactivate DBMS
employees --> api : Employee
deactivate employees

''''' create message
ref over api : Message::new
api -> messages : add()
activate messages
messages -> DBMS : <<query>>
activate DBMS
DBMS --> messages : raw response
deactivate DBMS
messages --> api : Message
deactivate messages

''''' send a message to the manager
ref over api : Employee::manager
api -> sender : send()
activate sender
sender ->> manager : <<send>>
sender --> api : void
deactivate sender

api -->  resource : void
deactivate api
resource --> paymaster : Response
deactivate resource
@enduml