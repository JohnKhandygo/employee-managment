@startuml

actor "participant : Employee" as participant
participant MeetingsResource as resource
participant MeetingsApi as api
participant "Repository<Group>" as groups
participant "Repository<Message>" as messages
participant MessageSender as sender
participant  "Repository<TimeReservations>" as reservations
actor group
database DBMS

participant -> resource : accept()
activate resource
resource -> api : accept()
activate api

''''' get meeting instance
api -> groups : get()
activate groups
groups -> DBMS : <<query>>
activate DBMS
DBMS --> groups : raw response
deactivate DBMS
groups --> api : Group
deactivate groups

ref over api : Group::participate()

''''' update group
api -> groups : update()
activate groups
groups -> DBMS : <<query>>
activate DBMS
DBMS --> groups : raw response
deactivate DBMS
groups --> api : Group
deactivate groups

''''' send message
ref over api : Message::new
api -> messages : add()
activate messages
messages --> api : Message
deactivate messages
api -> sender : send()
activate sender
sender ->> group : <<send>>
sender --> api : void
deactivate sender

''''' schedule a meeting
group if Group::isComplete()
  loop for each participant in group
    ''''' add time reservation
    ref over api : TimeReservation::new
    api -> reservations : add
    activate reservations
    reservations --> api : TimeReservation
    deactivate reservations
  end
  ''''' send a message about new meeting has been scheduling
  ref over api : Message::new
  api -> messages : add()
  activate messages
  messages --> api : Message
  deactivate messages
  api -> sender : send()
  activate sender
  sender ->> group : <<send>>
  sender --> api : void
  deactivate sender
end

api --> resource : void
deactivate api
resource --> participant : Response
deactivate resource

@enduml